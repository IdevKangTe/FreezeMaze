/**
 *
 * 3D MAP 파일
 *
 */
import * as THREE from 'three';

let stringMap = `1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1
1	1	1	0	0	0	0	1	1	1	1	1	0	0	0	0	0	0	0	1	1	0	0	0	1	0	0	0	1	0	0	0	0	0	1	0	0	0	0	1	1	1	1	1	0	0	0	0	3	1
1	1	1	0	1	1	0	1	1	1	1	1	0	1	1	1	0	1	0	0	0	0	1	0	1	0	1	0	1	0	1	1	1	0	1	0	1	1	0	1	1	1	1	1	0	1	1	1	0	1
1	1	0	0	1	1	0	1	1	1	1	1	0	1	1	1	0	1	1	1	1	0	1	0	0	0	1	0	0	0	1	0	0	0	1	0	0	0	0	1	1	1	0	0	0	0	0	1	0	1
1	1	0	1	1	0	0	0	0	0	0	0	0	0	0	0	0	0	1	0	0	0	1	1	1	1	1	1	1	1	0	0	1	0	1	1	0	1	0	1	1	0	0	1	1	1	0	1	0	1
1	0	0	1	1	0	1	1	1	0	1	1	1	1	1	1	1	0	1	0	1	1	1	1	0	0	0	0	0	1	0	1	0	0	1	1	0	1	0	0	0	0	1	0	0	0	0	1	0	1
1	0	1	1	1	0	0	0	0	0	0	1	1	0	0	0	1	0	1	0	0	1	1	1	0	1	1	1	0	1	0	1	0	1	1	1	0	0	0	1	1	0	0	0	1	1	0	0	0	1
1	0	1	1	1	1	1	1	1	1	0	1	0	0	1	0	1	0	0	1	0	0	0	0	0	1	1	0	0	1	0	1	0	1	1	0	0	1	1	1	1	0	1	1	1	1	0	1	0	1
1	0	0	0	0	0	0	0	0	0	0	0	0	1	1	0	1	1	0	1	1	1	0	1	1	0	0	0	1	1	0	0	0	0	1	0	1	0	0	0	1	0	1	0	0	0	0	1	0	1
1	0	1	1	1	1	1	1	1	0	1	1	1	0	0	0	0	0	0	0	0	0	0	0	0	0	1	1	1	1	1	1	1	0	0	0	1	0	1	0	1	0	0	0	1	0	1	1	0	1
1	0	0	1	1	0	0	0	1	0	1	1	1	0	1	1	1	1	1	1	0	1	1	1	1	0	1	0	0	0	1	1	0	0	1	0	1	0	1	0	1	0	1	1	0	0	0	0	0	1
1	1	0	1	1	0	1	0	1	0	1	1	1	0	1	0	0	0	0	1	0	0	0	0	1	0	1	0	1	0	1	1	0	1	1	0	1	0	0	0	0	0	0	0	0	1	1	0	1	1
1	0	0	1	0	0	1	0	0	0	0	1	1	0	0	0	1	1	0	1	0	1	1	0	0	0	0	0	1	0	0	0	0	0	1	0	1	1	1	1	1	0	1	1	1	0	0	0	1	1
1	0	1	1	0	1	1	0	1	1	0	0	0	1	1	0	1	0	0	1	0	1	0	0	1	1	1	1	1	0	1	1	1	0	1	0	0	0	0	0	0	0	1	0	0	0	1	0	1	1
1	0	0	0	0	0	0	0	1	1	0	1	0	0	0	0	1	0	1	1	0	1	0	1	0	0	0	0	0	0	1	1	0	0	1	0	1	1	0	1	1	1	1	0	1	1	0	0	0	1
1	1	0	1	1	1	1	0	0	1	0	1	0	1	0	1	1	0	0	0	0	1	0	0	0	1	0	1	1	0	0	1	0	1	1	0	1	0	0	1	0	0	0	0	1	1	0	1	0	1
1	1	0	0	0	0	1	1	0	1	0	1	0	1	0	1	0	0	1	1	0	1	0	1	1	0	0	1	1	1	0	0	0	1	0	0	1	0	1	0	0	1	1	0	0	0	0	0	0	1
1	1	1	1	1	0	1	1	0	0	0	1	0	1	0	0	0	1	1	0	0	1	0	1	1	0	1	0	0	0	1	1	1	0	0	1	0	0	1	0	1	1	0	0	1	1	1	1	0	1
1	1	1	0	0	0	1	0	0	1	0	1	0	1	0	1	1	0	0	0	1	0	0	1	0	0	0	0	1	0	0	0	0	0	1	1	0	1	0	0	1	1	0	1	1	0	0	0	0	1
1	1	0	0	1	1	1	0	1	1	0	1	0	1	0	0	0	0	1	1	1	0	1	0	0	1	0	1	1	1	1	1	0	1	1	1	0	1	0	1	1	0	0	0	1	0	1	1	1	1
1	1	0	1	1	1	1	0	1	1	0	1	0	1	0	1	1	0	0	0	1	0	1	0	1	1	0	0	0	0	1	0	0	0	0	1	0	1	0	0	0	0	1	0	1	0	0	0	1	1
1	1	0	1	0	0	0	0	0	0	0	1	0	1	0	1	1	1	1	0	1	0	0	0	1	1	1	0	1	0	0	0	1	1	0	0	0	1	0	1	1	0	1	0	0	1	1	0	0	1
1	1	0	1	0	1	1	1	1	1	0	0	0	1	0	1	0	0	0	0	1	0	1	1	1	0	0	0	1	0	1	0	0	1	1	0	1	1	0	1	1	0	0	1	0	0	0	1	0	1
1	1	0	0	0	0	0	0	1	1	1	1	0	0	0	1	0	1	1	0	1	0	0	0	0	0	1	1	0	0	1	1	0	1	1	0	1	0	0	0	1	1	0	1	1	1	0	1	0	1
1	1	1	1	1	1	1	0	0	0	1	1	1	0	1	1	0	1	0	0	1	0	1	1	1	0	0	0	0	1	1	1	0	1	1	0	0	0	1	0	0	0	0	1	1	0	0	1	0	1
1	1	0	0	0	0	1	1	1	0	0	1	1	0	1	0	0	1	0	1	1	0	1	1	0	0	1	1	0	0	0	0	0	1	0	0	1	1	0	0	1	0	1	1	1	0	1	0	0	1
1	0	0	1	1	0	0	0	1	1	0	1	1	0	0	0	1	0	0	1	0	0	0	0	0	1	1	1	1	1	1	0	1	1	0	1	1	0	0	1	1	0	1	1	1	0	1	0	1	1
1	0	1	1	1	1	1	0	0	1	0	1	1	1	0	1	1	0	1	1	0	1	1	0	1	0	0	0	0	0	1	0	0	1	0	1	1	0	1	1	1	0	1	1	0	0	0	0	0	1
1	0	1	0	0	0	1	1	0	1	0	1	1	1	0	1	1	0	0	1	0	1	1	0	1	0	1	1	1	0	1	1	0	1	0	0	0	0	0	0	0	0	1	0	0	1	1	1	0	1
1	0	0	0	1	0	0	0	0	1	0	0	1	0	0	0	0	1	0	0	0	1	0	0	1	0	1	0	0	0	0	1	0	0	1	0	0	1	1	1	1	0	1	0	1	0	0	0	0	1
1	0	1	0	1	0	1	1	0	1	1	0	1	0	1	1	0	1	1	1	0	1	0	1	0	0	0	0	1	1	0	1	1	0	1	1	0	0	1	1	1	0	0	0	1	0	1	0	1	1
1	0	1	0	0	0	1	0	0	1	1	0	0	0	1	0	0	0	0	0	0	1	0	0	0	1	1	1	1	1	0	0	0	0	0	0	1	0	0	1	1	1	1	1	0	0	1	0	1	1
1	0	0	1	1	1	0	0	1	1	1	1	1	1	0	0	1	1	1	1	0	0	1	1	0	0	0	0	0	0	0	1	1	1	1	0	0	1	0	0	0	0	0	0	0	1	1	0	1	1
1	1	0	0	0	0	0	1	1	1	1	1	1	1	0	1	0	0	0	1	1	0	1	0	0	1	0	1	1	0	1	0	0	0	1	1	0	1	0	1	1	1	1	1	1	1	0	0	1	1
1	1	1	1	0	1	1	0	0	0	1	1	1	0	0	0	0	1	0	0	0	0	1	0	1	1	0	1	0	0	0	0	1	0	0	0	0	0	0	1	1	1	1	1	1	1	0	1	1	1
1	1	0	0	0	0	0	0	1	0	1	1	1	0	1	1	1	1	1	1	1	0	1	0	0	0	0	1	0	1	1	1	1	1	1	1	0	1	1	1	1	0	0	0	1	1	0	1	1	1
1	0	0	1	0	1	1	1	1	0	1	1	0	0	0	0	1	1	1	1	0	0	1	1	0	1	1	1	0	0	0	1	1	1	1	0	0	1	1	1	1	0	1	0	0	0	0	1	1	1
1	0	1	1	0	1	0	0	0	0	1	1	0	1	1	0	0	1	0	0	0	1	0	0	0	0	0	1	1	1	0	0	1	0	0	0	1	1	1	1	1	0	1	0	1	1	1	1	1	1
1	0	1	0	0	1	0	1	1	0	1	1	0	1	1	1	0	0	0	1	1	0	0	1	1	1	0	0	1	1	1	0	0	0	1	0	1	1	1	1	0	0	1	0	0	0	1	1	1	1
1	0	0	0	1	0	0	0	1	0	0	0	0	0	0	0	1	1	1	1	0	0	1	1	1	1	1	0	0	0	0	1	1	1	1	0	1	1	1	1	0	1	1	0	1	0	1	1	1	1
1	0	1	0	0	0	1	0	0	0	1	1	0	1	1	0	1	1	1	0	0	1	1	1	1	1	1	1	0	1	0	1	1	1	0	0	0	0	1	0	0	1	0	0	1	0	0	0	1	1
1	0	1	0	1	0	1	1	1	0	1	1	0	1	1	0	0	1	0	0	0	1	1	1	1	1	1	1	0	0	0	0	1	0	0	1	1	0	0	0	1	0	0	1	1	1	1	0	1	1
1	0	1	0	1	0	1	1	1	0	1	0	0	0	0	1	0	1	0	1	0	0	1	1	1	1	1	0	0	1	1	0	1	0	1	1	1	1	0	1	0	0	1	1	0	0	0	0	0	1
1	0	1	0	1	0	1	1	1	0	1	0	1	1	0	0	0	1	0	1	1	0	0	1	1	1	0	0	1	1	1	0	1	0	0	0	1	1	0	0	0	1	0	0	0	1	1	1	0	1
1	0	0	0	0	0	0	0	0	0	0	0	0	1	0	1	0	0	0	1	1	1	0	0	0	0	0	1	1	1	1	0	0	0	1	0	1	1	0	1	1	1	0	1	0	0	0	0	0	1
1	1	0	1	1	1	1	0	1	1	1	1	0	1	0	1	1	1	0	0	0	0	0	1	1	1	0	0	0	0	0	0	1	1	0	0	1	1	0	1	0	0	0	1	0	1	1	1	0	1
1	0	0	1	1	0	0	0	0	0	0	0	0	1	0	0	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	0	0	1	1	1	0	1	0	1	1	1	0	0	0	0	0	1
1	0	1	1	1	0	1	1	1	1	1	1	0	1	1	0	0	0	1	1	1	1	1	1	1	1	1	1	1	1	1	0	0	0	1	1	1	1	0	1	0	1	1	1	0	1	1	1	0	1
1	3	0	0	0	0	0	0	0	0	0	0	0	1	1	1	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	1	1	1	1	1	1	0	0	0	0	0	0	0	0	0	0	0	1
1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1`;

// console.log(excelNum);

// 문자열 전체(g)에서 숫자0~9가 아닌 것 삭제 (string -> array)
stringMap = stringMap.split(/[^0-9]/g);
// console.log(excelNum);

// 문자열 숫자로 변환
const numMap = stringMap.map((row) => (row *= 1));
// console.log(mapNum);

// 이차원 배열에 담기
const map2D = [];
let mapX = [];

numMap.forEach((num) => {
  mapX.push(num);
  if (mapX.length === 50) {
    map2D.push(mapX);
    mapX = [];
  }
});
// console.log(map);

// map 배열 값 타입 확인
// const g = (map) => {
//     for(i in map) {
//         if (typeof map[i] !== "number") {
//             console.log(i);
//         }
//         else {
//             console.log('nothing');
//         }
//     }
// };
// console.log(g(map));

// 입체 질감

const { onLoad } = {
  onLoad: (texture) => {
    texture.repeat.y = 10;

    texture.wrapS = THREE.RepeatWrapping;
    texture.wrapT = THREE.RepeatWrapping;
  },
};

const textureLoader = new THREE.TextureLoader();
const basicTexture = textureLoader.load(
  'texture/ice/ice_001_COLOR.jpg',
  onLoad
);
const normalTexture = textureLoader.load('texture/ice/ice_001_NRM.jpg', onLoad);
const heightTexture = textureLoader.load(
  'texture/ice/ice_001_DISP.png',
  onLoad
);
const roughnessTexture = textureLoader.load(
  'texture/ice/ice_001_SPEC.jpg',
  onLoad
);

// const RoundBoxGeometry = new RoundedBoxGeometry(1,10,1,0.2,20);

// 큐브 객체 속성
const { wallGeo, wallMesh } = {
  wallGeo: new THREE.BoxGeometry(1, 10, 1),
  wallMesh: new THREE.MeshPhysicalMaterial({
    map: basicTexture,
    normalMap: normalTexture,
    displacementMap: heightTexture,
    color: 0xafe0ff,
    displacementScale: 0,
    roughnessMap: roughnessTexture,
    clearcoat: 1,
    clearcoatRoughness: 0,
    reflectivity: 1,
    transparent: true,
    opacity: 0.5,
  }),
};

const load = (scene) => {
  const map3D = [];
  let idx = 0;

  map2D.forEach((num1, idx1) => {
    let _map2D = map2D[idx1];
    _map2D.forEach((num2, idx2) => {
      // 값이 1인 위치에 기둥(=벽) 세우기
      if (_map2D[idx2] === 1) {
        map3D.push(new THREE.Mesh(wallGeo, wallMesh));

        map3D[idx].position.x = idx2;
        map3D[idx].position.y = 0;
        map3D[idx].position.z = idx1;

        scene.add(map3D[idx]);
        idx++;
      }
    });
  });

  return { scene, map3D };
};

export default load;
